

#include <iostream>
#include <vector>
#include <numeric>
using namespace std;
struct SegmentTree {
    vector <int> t;
    int half;
    SegmentTree (vector <int> & a, int n) {
        half = 1;
        while (half < n) half *= 2;
        t = vector <int> (half * 2);
        for (int i = 0; i < n; i++)
            t[i + half] = a[i];
        for (int i = half - 1; i >= 1; i--)
            t[i] = min(t[i * 2],t[i * 2 + 1]);
    }
    int sum (int lo, int hi) {
        lo--;
        hi--;
        int res = 1000000000;
        for (lo += half, hi += half;
        lo <= hi;
        lo /= 2, hi /= 2) {
            if (lo & 1){
                res = min(res,t[lo++]);
            }
            if (!(hi & 1)){
                res = min(res,t[hi--]);
            }
        }

        return res;
    }
};



int main () {
    int n,m;cin>>n>>m;
    vector<int>v(n);
    for (int i = 0; i < n; ++i) {
        cin>>v[i];
    }
    SegmentTree segment = SegmentTree(v, n);
    for (int i = 0; i < m; ++i) {
        int k,l;cin>>k>>l;
        for (int j = 0; j < n; ++j) {
            if(v[j]==segment.sum(k,l)){
                cout<<j+1<<'\n';
                break;
            }
        }
    }
    return 0;
}
